{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,WAAW,QAAQ,QAAQ;AAC5C;AACA,+EAA+E,UAAU;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;;;;;;;;ACvB3B;AACA;AACA;;AAEO;;AAEP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCtFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0C;AAUX;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uDAAK,mBAAmB,0DAAW;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAW;AACnB,QAAQ,uDAAK;AACb;AACA;AACA,QAAQ,6DAAO;AACf,QAAQ,+DAAS;AACjB;AACA,IAAI,6EAAuB;AAC3B;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,kEAAY;AACpB;AACA,IAAI,+DAAS;AACb,IAAI,6EAAuB;AAC3B;;AAEA;AACA;AACA;AACA;AACA,QAAQ,uDAAK;AACb,MAAM;AACN;AACA,QAAQ,uDAAK;AACb;AACA,IAAI,6EAAuB;AAC3B,IAAI,+DAAS;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,oEAAc;AACtB;AACA,IAAI,+DAAS;AACb,IAAI,6DAAO;AACX,IAAI,6EAAuB;AAC3B;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ,uEAAiB;AACzB;AACA,IAAI,6DAAO;AACX,IAAI,+DAAS;AACb,IAAI,6EAAuB;AAC3B;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,uDAAK;;AAE/B;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,6DAAO;AAC3B,oBAAoB,+DAAS;AAC7B,oBAAoB,uDAAK,GAAG,uDAAK;AACjC,kBAAkB;AAClB;AACA;AACA;AACA,wBAAwB,uDAAK;AAC7B;AACA;AACA;AACA,YAAY,6EAAuB;AACnC,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,oBAAoB,6DAAO;AAC3B,oBAAoB,+DAAS;AAC7B,oBAAoB,uDAAK,GAAG,uDAAK;AACjC,kBAAkB;AAClB;AACA;AACA;AACA,wBAAwB,uDAAK;AAC7B;AACA;AACA;AACA;AACA,YAAY,6EAAuB;AACnC,SAAS;AACT;AACA;AACA;;AAEA;;AAEA,uEAAiB","sources":["webpack://npm-start/./js/createTask.js","webpack://npm-start/./js/saveLocalStorage.js","webpack://npm-start/webpack/bootstrap","webpack://npm-start/webpack/runtime/define property getters","webpack://npm-start/webpack/runtime/hasOwnProperty shorthand","webpack://npm-start/webpack/runtime/make namespace object","webpack://npm-start/./js/main.js"],"sourcesContent":["const taskList = document.querySelector('.task-list');\n\nconst renderTasks = (task) => {\n    const statusDone =\n        task.isActive\n            ? 'list-item'\n            : 'list-item list-item_done';\n    const taskHTML = `\n    \n    <li class=\"${statusDone}\" id=\"${task.id}\">\n        <input type=\"checkbox\" data-action=\"done\" class=\"list-item__custom-button custom-button\">\n        <span data-action=\"edit\" class=\"list-item__task-text task-text_done\">${task.text}</span>\n        <textarea class=\"list-item__edit-text edit-text\"></textarea>\n        <button class=\"list-item__delete\" data-action=\"delete\">\n            <svg class=\"list-item__delete-img delete-img\" fill=\"#d2691e\" width=\"20px\" height=\"20px\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M0 14.545L1.455 16 8 9.455 14.545 16 16 14.545 9.455 8 16 1.455 14.545 0 8 6.545 1.455 0 0 1.455 6.545 8z\" fill-rule=\"evenodd\"></path>\n            </svg>\n        </button>\n    </li>`;\n\n    taskList.insertAdjacentHTML('beforeend', taskHTML);\n};\n\nexport default renderTasks;\n","const filterAllButton = document.querySelector('#filterAll');\nconst filterActiveButton = document.querySelector('#filterActive');\nconst filterCompletedButton = document.querySelector('#filterCompleted');\n\nexport let tasks = [];\n\nconst gettingTasks = () => {\n    tasks = JSON.parse(localStorage.getItem('tasks'));\n};\n\nexport const showBar = () => {\n    const listItem = document.querySelectorAll('.list-item');\n    const checkAllTask = document.querySelector('.check-all-task');\n    const bottomPanel = document.querySelector('.bottom-panel');\n\n    if (listItem.length === 0) {\n        bottomPanel.classList.remove('bottom-panel_show');\n        checkAllTask.classList.toggle('check-all-task_show');\n    } else {\n        bottomPanel.classList.add('bottom-panel_show');\n    }\n};\n\nexport const itemsLeft = () => {\n    const checkAllcheckbox = document.querySelector('.check-all-task__custom-button');\n    const numberOfTask = document.querySelector('.number_of_tasks');\n    const labelDone = document.querySelectorAll('.list-item_done');\n    const labelNotDone = document.querySelectorAll('.list-item:not(.list-item_done)');\n    const clear = document.querySelector('.bottom-panel__button_clear');\n\n    numberOfTask.innerHTML = labelNotDone.length;\n    checkAllcheckbox.checked = labelNotDone.length === 0;\n\n    labelDone.length !== 0\n        ? clear.classList.add('bottom-panel__button_clear_show')\n        : clear.classList.remove('bottom-panel__button_clear_show');\n};\n\nexport const saveTasksToLocalStorage = () => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n};\n\nexport const saveTaskList = () => {\n    if (localStorage.getItem('tasks')) {\n        gettingTasks();\n        showBar();\n        itemsLeft();\n    }\n};\n\nsaveTaskList();\n\nexport const saveTaskDone = (listItem, event) => {\n    const id = Number(listItem.id);\n    const task = tasks.find((task) => task.id === id);\n    if (event.target.closest('.list-item_done')) {\n        task.isActive = false;\n    } else {\n        task.isActive = true;\n    }\n};\n\nexport const saveTaskDelete = (listItem) => {\n    const id = Number(listItem.id);\n    tasks = tasks.filter((task) => task.id !== id);\n};\n\nexport const saveTaskAllDelete = () => {\n    tasks = tasks.filter((task) => task.isActive === true);\n};\n\nwindow.addEventListener('DOMContentLoaded', saveTaskList);\n\nexport const filterStateButton = () => {\n    const filterState = localStorage.getItem('filterState');\n    switch (filterState) {\n        case 'active':\n            gettingTasks(), filterActiveButton.click();\n            break;\n        case 'completed':\n            gettingTasks(), filterCompletedButton.click();\n            break;\n        case 'all':\n            gettingTasks(), filterAllButton.click();\n            break;\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import renderTasks from './createTask.js';\nimport {\n    tasks,\n    saveTasksToLocalStorage,\n    showBar,\n    itemsLeft,\n    saveTaskDelete,\n    saveTaskAllDelete,\n    saveTaskDone,\n    filterStateButton,\n} from './saveLocalStorage.js';\n\nconst formGroup = document.querySelector('.form-group');\nconst taskInput = document.querySelector('.form-group__task-input');\nconst taskList = document.querySelector('.task-list');\nconst checkAllcheckbox = document.querySelector('.check-all-task__custom-button');\nconst filterAllButton = document.querySelector('#filterAll');\nconst filterActiveButton = document.querySelector('#filterActive');\nconst filterCompletedButton = document.querySelector('#filterCompleted');\nfilterAllButton.classList.add('bottom-panel__button_active');\n\ntasks.forEach((task) => renderTasks(task));\n\nconst newTask = (event) => {\n    event.preventDefault();\n    if (taskInput.value.trim() !== '') {\n        const checkAllTask = document.querySelector('.check-all-task');\n        const taskText = taskInput.value;\n        const newTask = {\n            id: Date.now(),\n            text: taskText,\n            isActive: true,\n        };\n        renderTasks(newTask);\n        tasks.push(newTask);\n        checkAllTask.classList.add('check-all-task_show');\n        taskInput.value = '';\n        showBar();\n        itemsLeft();\n    }\n    saveTasksToLocalStorage();\n};\n\nformGroup.addEventListener('submit', (event) => newTask(event));\n\n//done Task\n\ntaskList.addEventListener('click', (event) => doneTask(event));\n\nconst doneTask = (event) => {\n    if (event.target.dataset.action === 'done') {\n        let listItem = event.target.closest('.list-item');\n        listItem.classList.toggle('list-item_done');\n        saveTaskDone(listItem, event);\n    }\n    itemsLeft();\n    saveTasksToLocalStorage();\n};\n\nconst checkAllTasks = () => {\n    const checkBoxAll = document.querySelectorAll('.custom-button');\n    if (checkAllcheckbox.checked) {\n        checkBoxAll.forEach((checkAll) => checkAll.parentNode.classList.add('list-item_done'));\n        tasks.forEach((task) => (task.isActive = false));\n    } else {\n        checkBoxAll.forEach((checkAll) => checkAll.parentNode.classList.remove('list-item_done'));\n        tasks.forEach((task) => (task.isActive = true));\n    }\n    saveTasksToLocalStorage();\n    itemsLeft();\n};\n\ncheckAllcheckbox.addEventListener('change', () => checkAllTasks());\n\n//delete Task\nconst deleteTask = (event) => {\n    let listItem = event.target.closest('.list-item');\n    if (event.target.dataset.action === 'delete') {\n        listItem.remove();\n        saveTaskDelete(listItem);\n    }\n    itemsLeft();\n    showBar();\n    saveTasksToLocalStorage();\n};\n\ntaskList.addEventListener('click', (event) => deleteTask(event));\n\n//filtres\nconst availabilityOfTasks = taskList.children.length > 0;\n//filterAll\n\nconst filterAll = () => {\n    if (availabilityOfTasks) {\n        taskList.classList.remove('task-list_show-completed-tasks');\n        taskList.classList.remove('task-list_show-active-tasks');\n        filterAllButton.classList.add('bottom-panel__button_active');\n        filterActiveButton.classList.remove('bottom-panel__button_active');\n        filterCompletedButton.classList.remove('bottom-panel__button_active');\n        localStorage.setItem('filterState', 'all');\n    }\n};\n\nfilterAllButton.onclick = filterAll;\n\n//filterActive\nconst filterActive = () => {\n    if (availabilityOfTasks) {\n        taskList.classList.remove('task-list_show-completed-tasks');\n        taskList.classList.add('task-list_show-active-tasks');\n        filterAllButton.classList.remove('bottom-panel__button_active');\n        filterActiveButton.classList.add('bottom-panel__button_active');\n        filterCompletedButton.classList.remove('bottom-panel__button_active');\n        localStorage.setItem('filterState', 'active');\n    }\n};\n\nfilterActiveButton.onclick = filterActive;\n\n//filterCompleted\nconst filterCompleted = () => {\n    if (availabilityOfTasks) {\n        taskList.classList.add('task-list_show-completed-tasks');\n        taskList.classList.remove('task-list_show-active-tasks');\n        filterAllButton.classList.remove('bottom-panel__button_active');\n        filterActiveButton.classList.remove('bottom-panel__button_active');\n        filterCompletedButton.classList.add('bottom-panel__button_active');\n        localStorage.setItem('filterState', 'completed');\n    }\n};\n\nfilterCompletedButton.onclick = filterCompleted;\n\n//clearAllTask\nconst clearButton = document.querySelector('.bottom-panel__button_clear');\n\nconst clearAll = () => {\n    let listItem = document.querySelectorAll('.list-item_done');\n    if (listItem) {\n        listItem.forEach((task) => task.remove());\n        saveTaskAllDelete();\n    }\n    showBar();\n    itemsLeft();\n    saveTasksToLocalStorage();\n};\n\nclearButton.onclick = clearAll;\n\n//editATask\n\nconst editATask = (event) => {\n    if (event.target.dataset.action === 'edit') {\n        const listItem = event.target.closest('.list-item');\n        const editInput = listItem.querySelector('.list-item__edit-text');\n        const label = listItem.querySelector('.list-item__task-text');\n        const containsClass = listItem.classList.contains('list-item_edit-mode');\n        const id = Number(listItem.id);\n        const taskIndex = tasks.findIndex((task) => task.id === id);\n\n        window.addEventListener('dblclick', () => editInput.focus());\n\n        if (containsClass) {\n            label.innerText = editInput.value;\n        } else {\n            editInput.value = label.innerText;\n        }\n\n        window.addEventListener('keypress', function (event) {\n            if (event.key === 'Enter') {\n                if (editInput.value === '') {\n                    listItem.remove();\n                    showBar();\n                    itemsLeft();\n                    tasks = tasks.filter((task) => task.id !== id);\n                } else {\n                    label.innerText = editInput.value;\n                    listItem.classList.remove('list-item_edit-mode');\n                    if (taskIndex !== -1) {\n                        tasks[taskIndex].text = editInput.value;\n                    }\n                }\n            }\n            saveTasksToLocalStorage();\n        });\n\n        window.addEventListener('keyup', function (event) {\n            if (event.key === 'Escape') {\n                listItem.classList.remove('list-item_edit-mode');\n                editInput.value = label.innerText;\n            }\n        });\n\n        window.addEventListener('click', function (event) {\n            if (event.target !== editInput) {\n                if (editInput.value === '') {\n                    listItem.remove();\n                    showBar();\n                    itemsLeft();\n                    tasks = tasks.filter((task) => task.id !== id);\n                } else {\n                    label.innerText = editInput.value;\n                    listItem.classList.remove('list-item_edit-mode');\n                    if (taskIndex !== -1) {\n                        tasks[taskIndex].text = editInput.value;\n                    }\n                }\n                listItem.classList.remove('list-item_edit-mode');\n            }\n            saveTasksToLocalStorage();\n        });\n        listItem.classList.toggle('list-item_edit-mode');\n    }\n};\n\ntaskList.addEventListener('dblclick', (event) => editATask(event));\n\nfilterStateButton();\n"],"names":[],"sourceRoot":""}