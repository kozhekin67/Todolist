{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,WAAW,QAAQ,QAAQ;AAC5C;AACA,yFAAyF,UAAU;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAe,WAAW,EAAC;;;;;;;;;;;;;;;;ACvB3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;UC1CA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0C;AAC1C;AAC6D;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,gEAAO;AACf,QAAQ,kEAAS;AACjB;AACA;;AAEA;;AAEA;;AAEA;AACA,IAAI,0DAAW;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAW;AACnB;AACA;AACA;AACA,QAAQ,gEAAO;AACf,QAAQ,kEAAS;AACjB;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAS;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,IAAI,kEAAS;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kEAAS;AACb,IAAI,gEAAO;AACX;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,gEAAO;AACX,IAAI,kEAAS;AACb;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mDAAmD,kBAAkB;AACrE;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB,gEAAO;AAC3B,oBAAoB,kEAAS;AAC7B;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,oBAAoB,gEAAO;AAC3B,oBAAoB,kEAAS;AAC7B;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://npm-start/./js/createTask.js","webpack://npm-start/./js/showBarAnditemsLeft.js","webpack://npm-start/webpack/bootstrap","webpack://npm-start/webpack/runtime/define property getters","webpack://npm-start/webpack/runtime/hasOwnProperty shorthand","webpack://npm-start/webpack/runtime/make namespace object","webpack://npm-start/./js/main.js"],"sourcesContent":["const taskList = document.querySelector('.task-list');\n\nconst renderTasks = (task) => {\n    const statusDone =\n        task.status === 'done'\n            ? 'task-list__list-item list-item list-item_done'\n            : 'task-list__list-item list-item';\n    const taskHTML = `\n    \n    <li class=\"${statusDone}\" id=\"${task.id}\">\n        <input type=\"checkbox\" data-action=\"done\" class=\"task-list__custom-button custom-button\">\n        <span data-action=\"edit\" class=\"task-list__task-text task-text task-text_done\">${task.text}</span>\n        <textarea class=\"task-list__edit-text edit-text\"></textarea>\n        <button class=\"task-list__delete\" data-action=\"delete\">\n            <svg class=\"task-list__delete-img delete-img\" fill=\"#d2691e\" width=\"20px\" height=\"20px\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M0 14.545L1.455 16 8 9.455 14.545 16 16 14.545 9.455 8 16 1.455 14.545 0 8 6.545 1.455 0 0 1.455 6.545 8z\" fill-rule=\"evenodd\"></path>\n            </svg>\n        </button>\n    </li>`;\n\n    taskList.insertAdjacentHTML('beforeend', taskHTML);\n};\n\nexport default renderTasks;\n","const bottomPanel = document.querySelector('.bottom-panel');\nconst filterAllButton = document.querySelector('#filterAll');\nconst filterActiveButton = document.querySelector('#filterActive');\nconst filterCompletedButton = document.querySelector('#filterCompleted');\nconst checkAllcheckbox = document.querySelector('.check-all-task__custom-button');\n\nconst showBar = () => {\n    let listItem = document.querySelectorAll('.task-list__list-item');\n    let checkAllTask = document.querySelector('.check-all-task');\n\n    if (listItem.length !== 0) {\n        bottomPanel.classList.add('bottom-panel_show');\n        checkAllTask.classList.add('check-all-task_show');\n    } else if (listItem.length === 0) {\n        bottomPanel.classList.remove('bottom-panel_show');\n        filterAllButton.classList.remove('bottom-panel__button_active');\n        filterActiveButton.classList.remove('bottom-panel__button_active');\n        filterCompletedButton.classList.remove('bottom-panel__button_active');\n        checkAllTask.classList.remove('check-all-task_show');\n    } else {\n        bottomPanel.classList.remove('bottom-panel_show');\n        checkAllTask.classList.remove('check-all-task_show');\n    }\n};\n\nconst itemsLeft = () => {\n    let numberOfTask = document.querySelector('.number_of_tasks');\n    let label = document.querySelectorAll('.list-item');\n    let labelNotDone = document.querySelectorAll('.list-item:not(.list-item_done)');\n    let clear = document.querySelector('.bottom-panel__button_clear');\n\n    numberOfTask.innerHTML = labelNotDone.length;\n\n    if (label.length === 0) {\n        clear.classList.remove('bottom-panel__button_clear_show');\n    } else if (labelNotDone.length === 0) {\n        checkAllcheckbox.checked = true;\n        clear.classList.add('bottom-panel__button_clear_show');\n    } else {\n        clear.classList.add('bottom-panel__button_clear_show');\n        checkAllcheckbox.checked = false;\n    }\n};\n\nexport { showBar, itemsLeft};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import renderTasks from './createTask.js';\n//import saveTasksToLocalStorage from './saveLocalStorage.js';\nimport { showBar, itemsLeft} from './showBarAnditemsLeft.js';\n\nconst formGroup = document.querySelector('.form-group');\nconst taskInput = document.querySelector('.form-group__task-input');\nconst taskList = document.querySelector('.task-list');\nconst checkAllcheckbox = document.querySelector('.check-all-task__custom-button');\nconst filterAllButton = document.querySelector('#filterAll');\nconst filterActiveButton = document.querySelector('#filterActive');\nconst filterCompletedButton = document.querySelector('#filterCompleted');\nfilterAllButton.classList.add('bottom-panel__button_active');\n\nlet tasks = [];\n\nconst saveTaskList = () => {\n    if (localStorage.getItem('tasks')) {\n        tasks = JSON.parse(localStorage.getItem('tasks'));\n        showBar();\n        itemsLeft();\n    }\n};\n\nsaveTaskList ();\n\nwindow.addEventListener('DOMContentLoaded', saveTaskList);\n\ntasks.forEach((task) => {\n    renderTasks(task);\n});\n\nconst newTask = (event) => {\n    event.preventDefault();\n    if (taskInput.value.trim() !== '') {\n        const checkAllTask = document.querySelector('.check-all-task');\n        const taskText = taskInput.value;\n        const newTask = {\n            id: Date.now(),\n            text: taskText,\n            status: \"active\",\n        };\n        renderTasks(newTask);\n        tasks.push(newTask);\n        checkAllTask.classList.add('check-all-task_show');\n        taskInput.value = '';\n        showBar();\n        itemsLeft();\n    }\n    saveTasksToLocalStorage();\n};\n\nformGroup.addEventListener('submit', (event) => newTask(event));\n\n//done Task\n\ntaskList.addEventListener('click', (event) => doneTask(event));\n\nconst doneTask = (event) => {\n    if (event.target.dataset.action === 'done') {\n        let listItem = event.target.closest('.list-item');\n        listItem.classList.toggle('list-item_done');\n        const id = Number(listItem.id);\n        const task = tasks.find((task) => task.id === id);\n        if (event.target.closest('.list-item_done')) {\n            task.status = 'done';\n        }\n        else {\n            task.status = 'active';\n        }\n        //console.log(id);\n    }\n    itemsLeft();\n    saveTasksToLocalStorage();\n};\n\n// eslint-disable-next-line no-unused-vars\n\nconst checkAllTasks = () => {\n    const checkBoxAll = document.querySelectorAll('.custom-button');\n        if (checkAllcheckbox.checked === true) {\n            checkBoxAll.forEach((checkAll) => checkAll.parentNode.classList.add('list-item_done'));\n            tasks.forEach((task) => task.status = \"done\");\n        } else if (checkAllcheckbox.checked === false) {\n            checkBoxAll.forEach((checkAll) => checkAll.parentNode.classList.remove('list-item_done'));\n            tasks.forEach((task)=> task.status = \"active\");\n        }\n    saveTasksToLocalStorage(); \n    itemsLeft();\n};\n\ncheckAllcheckbox.addEventListener('change', () => checkAllTasks());\n\n//delete Task\nconst deleteTask = (event) => {\n    let listItem = event.target.closest('.task-list__list-item');\n    if (event.target.dataset.action === 'delete') {\n        listItem.remove();\n        console.log(tasks);\n        const id = Number(listItem.id);\n        tasks = tasks.filter((task) => task.id !== id);\n    }\n    itemsLeft();\n    showBar();\n    saveTasksToLocalStorage();\n};\n\ntaskList.addEventListener('click', (event) => deleteTask(event));\n\n//filterAll\n\nconst filterAll = () => {\n    let listItem = document.querySelector('.task-list');\n\n    if (listItem.children.length > 0) {\n        listItem.classList.remove('task-list_show-completed-tasks');\n        listItem.classList.remove('task-list_show-active-tasks');\n        filterAllButton.classList.add('bottom-panel__button_active');\n        filterActiveButton.classList.remove('bottom-panel__button_active');\n        filterCompletedButton.classList.remove('bottom-panel__button_active');\n        localStorage.setItem('filterState', 'all');\n    }\n};\n\nfilterAllButton.onclick = filterAll;\n\n//filterActive\nconst filterActive = () => {\n    let listItem = document.querySelector('.task-list');\n\n    if (listItem.children.length > 0) {\n        listItem.classList.remove('task-list_show-completed-tasks');\n        listItem.classList.add('task-list_show-active-tasks');\n        filterAllButton.classList.remove('bottom-panel__button_active');\n        filterActiveButton.classList.add('bottom-panel__button_active');\n        filterCompletedButton.classList.remove('bottom-panel__button_active');\n        localStorage.setItem('filterState', 'active');\n    }\n};\n\nfilterActiveButton.onclick = filterActive;\n\n//filterCompleted\nconst filterCompleted = () => {\n    let listItem = document.querySelector('.task-list');\n\n    if (listItem.children.length > 0) {\n        listItem.classList.add('task-list_show-completed-tasks');\n        listItem.classList.remove('task-list_show-active-tasks');\n        filterAllButton.classList.remove('bottom-panel__button_active');\n        filterActiveButton.classList.remove('bottom-panel__button_active');\n        filterCompletedButton.classList.add('bottom-panel__button_active');\n        localStorage.setItem('filterState', 'completed');\n    }\n};\n\nfilterCompletedButton.onclick = filterCompleted;\n\n//clearAllTask\nconst clearButton = document.querySelector('.bottom-panel__button_clear');\n\nconst clearAll = () => {\n    let listItem = document.querySelectorAll('.list-item_done');\n    if (listItem) {\n        listItem.forEach((task) => task.remove());\n        tasks = tasks.filter((task) => task.status !== \"done\");\n    }\n    \n    showBar();\n    itemsLeft();\n    saveTasksToLocalStorage();\n};\n\nclearButton.onclick = clearAll;\n\n//editATask\n\nconst editATask = (event) => {\n    if ((event.target.dataset.action === 'edit')) {\n        const listItem = event.target.closest('.task-list__list-item');\n        const editInput = listItem.querySelector('.task-list__edit-text');\n        const label = listItem.querySelector('.task-list__task-text');\n        const containsClass = listItem.classList.contains('list-item_edit-mode');\n        const id = Number(listItem.id);\n        const taskIndex = tasks.findIndex((task) => task.id === id);\n\n        window.addEventListener('dblclick', () => {editInput.focus()});\n    \n        if (containsClass) {\n            label.innerText = editInput.value;\n        } else {\n            editInput.value = label.innerText;\n        }\n\n        window.addEventListener('keypress', function (event) {\n            if (event.key === 'Enter') {\n                if (editInput.value === '') {\n                    listItem.remove();\n                    showBar();\n                    itemsLeft();\n                    tasks = tasks.filter((task) => task.id !== id);\n                } else {\n                    label.innerText = editInput.value;\n                    listItem.classList.remove('list-item_edit-mode');\n                    if (taskIndex !== -1) {\n                        tasks[taskIndex].text = editInput.value;\n                    }\n                }\n            }\n            saveTasksToLocalStorage();\n        });\n\n        window.addEventListener('keyup', function (event) {\n            if (event.key === 'Escape') {\n                listItem.classList.remove('list-item_edit-mode');\n                editInput.value = label.innerText;\n            }\n        });\n\n        window.addEventListener('click', function (event) {\n            if (event.target !== editInput) {\n                if (editInput.value === '') {\n                    listItem.remove();\n                    showBar();\n                    itemsLeft();\n                    tasks = tasks.filter((task) => task.id !== id);\n                } else {\n                    label.innerText = editInput.value;\n                    listItem.classList.remove('list-item_edit-mode');\n                    if (taskIndex !== -1) {\n                        tasks[taskIndex].text = editInput.value;\n                    }\n                    console.log(taskIndex);\n                }\n                listItem.classList.remove('list-item_edit-mode');\n            }\n        saveTasksToLocalStorage();\n        });\n        listItem.classList.toggle('list-item_edit-mode');\n    };\n};\n\ntaskList.addEventListener('dblclick', (event) => editATask(event));\n\nfunction saveTasksToLocalStorage() {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n}\n\nconst filterState = localStorage.getItem('filterState');\n\nswitch (filterState) {\n    case 'active':\n        (tasks = JSON.parse(localStorage.getItem('tasks'))), filterActiveButton.click();\n        break;\n    case 'completed':\n        (tasks = JSON.parse(localStorage.getItem('tasks'))), filterCompletedButton.click();\n        break;\n    case 'all':\n        (tasks = JSON.parse(localStorage.getItem('tasks'))), filterAllButton.click();\n        break;\n}\n"],"names":[],"sourceRoot":""}